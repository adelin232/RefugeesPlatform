version: "3.7"

services:
  loki:
    container_name: loki
    image: grafana/loki:2.5.0
    volumes:
      - ./loki:/etc/loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - loki
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  promtail:
    container_name: promtail
    image: grafana/promtail:2.5.0
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - loki
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  grafana:
    container_name: grafana
    build: ./grafana
    ports:
      - "3000:3000"
    networks:
      - loki
      - default
    volumes:
      - ./grafana/grafana-storage:/var/lib/grafana
    environment:
      # grafana
      GF_SECURITY_ADMIN_USER: $GRAFANA_USER
      GF_SECURITY_ADMIN_PASSWORD: $GRAFANA_PASSWORD
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_PROTOCOL: https
      GF_SERVER_CERT_KEY: /etc/grafana/grafana.key
      GF_SERVER_CERT_FILE: /etc/grafana/grafana.crt
      # proxy
      VIRTUAL_HOST: $GRAFANA_PROXY_ADDRESS
      VIRTUAL_PROTO: https
      VIRTUAL_PORT: 3000
      CERT_NAME: grafana
    extra_hosts:
      - "$GRAFANA_PROXY_ADDRESS:127.0.0.1"
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  mysqldb:
    container_name: mysqldb
    build: ./mysql
    restart: unless-stopped
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
      - MYSQL_DATABASE=$MYSQLDB_DATABASE
    ports:
      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    volumes:
      - ./mysql/mysql-data:/var/lib/mysql
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  rabbitmq-broker:
    container_name: rabbitmq-broker
    restart: unless-stopped
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile_broker
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      # proxy
      VIRTUAL_HOST: $RABBIT_PROXY_ADDRESS
      # VIRTUAL_PROTO: https
      VIRTUAL_PORT: 15672
      CERT_NAME: rabbitmq
    extra_hosts:
      - "$RABBIT_PROXY_ADDRESS:127.0.0.1"
    networks:
      - rabbitmq
      - default
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  rabbitmq-listener:
    depends_on:
      - rabbitmq-broker
    container_name: rabbitmq-listener
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile_listener
    # restart: unless-stopped
    environment:
      - HOST=rabbitmq-broker
      - QUEUE_NAME=rabbit_queue
    # ports:
    #   - "15673:15673"
    #   - "5673:5673"
    networks:
      - rabbitmq
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  app:
    container_name: spring-app
    depends_on:
      - mysqldb
    build: ./project
    restart: on-failure
    env_file: ./.env
    ports:
      - 8443:8443
    environment:
      # proxy
      VIRTUAL_HOST: $SPRING_PROXY_ADDRESS
      VIRTUAL_PROTO: https
      VIRTUAL_PORT: 8443
      CERT_NAME: spring
      # spring
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysqldb:$MYSQLDB_DOCKER_PORT/$MYSQLDB_DATABASE?allowPublicKeyRetrieval=true&useSSL=false",
        "spring.datasource.username" : "$MYSQLDB_USER",
        "spring.datasource.password" : "$MYSQLDB_ROOT_PASSWORD",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL5InnoDBDialect",
        "spring.jpa.hibernate.ddl-auto" : "update"
      }'
      # rabbitmq
      SPRING_RABBITMQ_HOST: $SPRING_RABBITMQ_HOST
      SPRING_RABBITMQ_PORT: $SPRING_RABBITMQ_PORT
      SPRING_RABBITMQ_USERNAME: $SPRING_RABBITMQ_USERNAME
      SPRING_RABBITMQ_PASSWORD: $SPRING_RABBITMQ_PASSWORD
    volumes:
      - /project/.m2:/root/.m2
      - /project/logs:/workspace/logs
    stdin_open: true
    tty: true
    extra_hosts:
      - "$SPRING_PROXY_ADDRESS:127.0.0.1"
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  adminer:
    container_name: adminer
    depends_on: 
      - mysqldb
    build: ./adminer
    environment:
      # proxy
      VIRTUAL_HOST: $ADMINER_PROXY_ADDRESS
      CERT_NAME: adminer
      # adminer
      ADMINER_DEFAULT_SERVER: mysqldb
      ADMINER_DESIGN: 'pepa-linha'
      ADMINER_PLUGINS: 'tables-filter tinymce dump-json dump-alter'
    ports:
      - 6969:8080
    extra_hosts:
      - "$ADMINER_PROXY_ADDRESS:127.0.0.1"
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  portainer:
    container_name: portainer
    depends_on:
      - mysqldb
      - adminer
      - app
    build: ./portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer/portainer-data:/data
    ports:
      # - 9000:9000   # http
      - 9443:9443   # https
    environment:
      #proxy
      VIRTUAL_HOST: $PORTAINER_PROXY_ADDRESS
      VIRTUAL_PROTO: https
      VIRTUAL_PORT: 9443
      CERT_NAME: portainer
    extra_hosts:
      - "$PORTAINER_PROXY_ADDRESS:127.0.0.1"
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"

  nginx-proxy:
    container_name: nginx-proxy
    depends_on:
      - portainer
    image: jwilder/nginx-proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx/certs:/etc/nginx/certs
    logging:
      driver: json-file
      options:
        tag: "{{.Name}}|{{.ImageName}}|{{.ImageFullID}}|{{.FullID}}"
    
networks:
    loki:
    rabbitmq:
